/* eslint:disable */
// Code generated by gotsrpc https://github.com/foomo/gotsrpc/v2  - DO NOT EDIT.
import * as github_com_foomo_gotsrpc_playground_server_services_playground from './vo-playground'; // client/services/generated/client-todos.ts to client/services/generated/vo-playground.ts
import * as github_com_foomo_gotsrpc_playground_server_services_todos from './vo-todos'; // client/services/generated/client-todos.ts to client/services/generated/vo-todos.ts
import * as github_com_foomo_gotsrpc_playground_server_services_wof from './vo-wof'; // client/services/generated/client-todos.ts to client/services/generated/vo-wof.ts
import * as time from './vo-time'; // client/services/generated/client-todos.ts to client/services/generated/vo-time.ts

export class ServiceClient {
	public static defaultEndpoint = "/services/todos";
	constructor(
		public transport:<T>(method: string, data?: any[]) => Promise<T>
	) {}
	async createTodo(text:string):Promise<{todos:github_com_foomo_gotsrpc_playground_server_services_todos.Todos|null; err:github_com_foomo_gotsrpc_playground_server_services_todos.Error|null}> {
		const response = await this.transport<{0:github_com_foomo_gotsrpc_playground_server_services_todos.Todos|null; 1:github_com_foomo_gotsrpc_playground_server_services_todos.Error|null}>("CreateTodo", [text])
		return {todos : response[0], err : response[1]};
	}
	async deleteTodo(ID:github_com_foomo_gotsrpc_playground_server_services_todos.TodoID):Promise<{todos:github_com_foomo_gotsrpc_playground_server_services_todos.Todos|null; err:github_com_foomo_gotsrpc_playground_server_services_todos.Error|null}> {
		const response = await this.transport<{0:github_com_foomo_gotsrpc_playground_server_services_todos.Todos|null; 1:github_com_foomo_gotsrpc_playground_server_services_todos.Error|null}>("DeleteTodo", [ID])
		return {todos : response[0], err : response[1]};
	}
	async getTodos():Promise<{todos:github_com_foomo_gotsrpc_playground_server_services_todos.Todos|null; err:github_com_foomo_gotsrpc_playground_server_services_todos.Error|null}> {
		const response = await this.transport<{0:github_com_foomo_gotsrpc_playground_server_services_todos.Todos|null; 1:github_com_foomo_gotsrpc_playground_server_services_todos.Error|null}>("GetTodos", [])
		return {todos : response[0], err : response[1]};
	}
	async setComplete(ID:github_com_foomo_gotsrpc_playground_server_services_todos.TodoID, complete:boolean):Promise<{todos:github_com_foomo_gotsrpc_playground_server_services_todos.Todos|null; err:github_com_foomo_gotsrpc_playground_server_services_todos.Error|null}> {
		const response = await this.transport<{0:github_com_foomo_gotsrpc_playground_server_services_todos.Todos|null; 1:github_com_foomo_gotsrpc_playground_server_services_todos.Error|null}>("SetComplete", [ID, complete])
		return {todos : response[0], err : response[1]};
	}
}