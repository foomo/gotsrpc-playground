// Code generated by gotsrpc https://github.com/foomo/gotsrpc/v2  - DO NOT EDIT.

package todos

import (
	io "io"
	http "net/http"
	time "time"

	gotsrpc "github.com/foomo/gotsrpc/v2"
)

const (
	ServiceGoTSRPCProxyCreateTodo  = "CreateTodo"
	ServiceGoTSRPCProxyDeleteTodo  = "DeleteTodo"
	ServiceGoTSRPCProxyGetTodos    = "GetTodos"
	ServiceGoTSRPCProxySetComplete = "SetComplete"
)

type ServiceGoTSRPCProxy struct {
	EndPoint string
	service  Service
}

func NewDefaultServiceGoTSRPCProxy(service Service) *ServiceGoTSRPCProxy {
	return NewServiceGoTSRPCProxy(service, "/services/todos")
}

func NewServiceGoTSRPCProxy(service Service, endpoint string) *ServiceGoTSRPCProxy {
	return &ServiceGoTSRPCProxy{
		EndPoint: endpoint,
		service:  service,
	}
}

// ServeHTTP exposes your service
func (p *ServiceGoTSRPCProxy) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodOptions {
		return
	} else if r.Method != http.MethodPost {
		gotsrpc.ErrorMethodNotAllowed(w)
		return
	}
	defer io.Copy(io.Discard, r.Body) // Drain Request Body

	funcName := gotsrpc.GetCalledFunc(r, p.EndPoint)
	callStats, _ := gotsrpc.GetStatsForRequest(r)
	callStats.Func = funcName
	callStats.Package = "github.com/foomo/gotsrpc-playground/server/services/todos"
	callStats.Service = "Service"
	switch funcName {
	case ServiceGoTSRPCProxyCreateTodo:
		var (
			args []interface{}
			rets []interface{}
		)
		var (
			arg_text string
		)
		args = []interface{}{&arg_text}
		if err := gotsrpc.LoadArgs(&args, callStats, r); err != nil {
			gotsrpc.ErrorCouldNotLoadArgs(w)
			return
		}
		executionStart := time.Now()
		createTodoTodos, createTodoErr := p.service.CreateTodo(arg_text)
		callStats.Execution = time.Since(executionStart)
		rets = []interface{}{createTodoTodos, createTodoErr}
		if err := gotsrpc.Reply(rets, callStats, r, w); err != nil {
			gotsrpc.ErrorCouldNotReply(w)
			return
		}
		gotsrpc.Monitor(w, r, args, rets, callStats)
		return
	case ServiceGoTSRPCProxyDeleteTodo:
		var (
			args []interface{}
			rets []interface{}
		)
		var (
			arg_ID TodoID
		)
		args = []interface{}{&arg_ID}
		if err := gotsrpc.LoadArgs(&args, callStats, r); err != nil {
			gotsrpc.ErrorCouldNotLoadArgs(w)
			return
		}
		executionStart := time.Now()
		deleteTodoTodos, deleteTodoErr := p.service.DeleteTodo(arg_ID)
		callStats.Execution = time.Since(executionStart)
		rets = []interface{}{deleteTodoTodos, deleteTodoErr}
		if err := gotsrpc.Reply(rets, callStats, r, w); err != nil {
			gotsrpc.ErrorCouldNotReply(w)
			return
		}
		gotsrpc.Monitor(w, r, args, rets, callStats)
		return
	case ServiceGoTSRPCProxyGetTodos:
		var (
			args []interface{}
			rets []interface{}
		)
		executionStart := time.Now()
		getTodosTodos, getTodosErr := p.service.GetTodos()
		callStats.Execution = time.Since(executionStart)
		rets = []interface{}{getTodosTodos, getTodosErr}
		if err := gotsrpc.Reply(rets, callStats, r, w); err != nil {
			gotsrpc.ErrorCouldNotReply(w)
			return
		}
		gotsrpc.Monitor(w, r, args, rets, callStats)
		return
	case ServiceGoTSRPCProxySetComplete:
		var (
			args []interface{}
			rets []interface{}
		)
		var (
			arg_ID       TodoID
			arg_complete bool
		)
		args = []interface{}{&arg_ID, &arg_complete}
		if err := gotsrpc.LoadArgs(&args, callStats, r); err != nil {
			gotsrpc.ErrorCouldNotLoadArgs(w)
			return
		}
		executionStart := time.Now()
		setCompleteTodos, setCompleteErr := p.service.SetComplete(arg_ID, arg_complete)
		callStats.Execution = time.Since(executionStart)
		rets = []interface{}{setCompleteTodos, setCompleteErr}
		if err := gotsrpc.Reply(rets, callStats, r, w); err != nil {
			gotsrpc.ErrorCouldNotReply(w)
			return
		}
		gotsrpc.Monitor(w, r, args, rets, callStats)
		return
	default:
		gotsrpc.ClearStats(r)
		gotsrpc.ErrorFuncNotFound(w)
	}
}
