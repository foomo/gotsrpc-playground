# build targets define for which interfaces code will be generated in a package
targets:

  # the key of a target is arbitrary and solely serves readability
  todos:
    # map of service path => interface ie which service will be exposed on 
    # which path
    services:
      /services/todos: Service
    # go package
    package: github.com/foomo/gotsrpc-playground/server/services/todos
    # target file for TypeScript client generation
    out: client/services/generated/client-todos.ts
    # which services should be generated in the (go)TypeScript RPC flavor
    tsrpc:
      - Service
      
  helloworld:
    services:
      /services/helloworld: Service
    package: github.com/foomo/gotsrpc-playground/server/services/helloworld
    out: client/services/generated/client-helloworld.ts
    tsrpc:
      - Service


  wheeloffortune:
    services:
      /services/wof: Service
    package: github.com/foomo/gotsrpc-playground/server/services/wof
    out: client/services/generated/client-wof.ts
    tsrpc:
      - Service

  playground:
    services:
      /services/playground: Service
    package: github.com/foomo/gotsrpc-playground/server/services/playground
    out: client/services/generated/client-playground.ts
    tsrpc:
      - Service

  ouch:
    services:
      /services/ouch: Service
    package: github.com/foomo/gotsrpc-playground/server/services/ouch
    out: client/services/generated/client-ouch.ts
    tsrpc:
      - Service

# mappings of go packages to typescript files
mappings:
  github.com/foomo/gotsrpc-playground/server/services/todos:
    out: client/services/generated/vo-todos.ts
  github.com/foomo/gotsrpc-playground/server/services/wof:
    out: client/services/generated/vo-wof.ts
  github.com/foomo/gotsrpc-playground/server/services/playground:
    out: client/services/generated/vo-playground.ts
  github.com/foomo/gotsrpc-playground/server/services/ouch:
    out: client/services/generated/vo-ouch.ts
  time:
    out: client/services/generated/vo-time.ts
